{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","bots_starting_state","5","name","image","username","description","about","status","3","4","1","2","0","BotCard","props","className","src","element","App","socket","io","on","data","numbers","split","setState","state","new_bot_state","bots","Object","values","forEach","n","emit","this","map","ele","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,2LCMrCC,EAAsB,CAC1BC,EAAG,CACDC,KAAM,WACNC,MACE,4FACFC,SAAU,cACVC,YAAa,iCACbC,MAAO,iCACPC,QAAQ,GAEVC,EAAG,CACDN,KAAM,WACNC,MACE,4FACFC,SAAU,cACVC,YAAa,iCACbC,MAAO,iCACPC,QAAQ,GAEVE,EAAG,CACDP,KAAM,WACNC,MACE,4FACFC,SAAU,cACVC,YAAa,iCACbC,MAAO,iCACPC,QAAQ,GAEVG,EAAE,CACAR,KAAM,YACNC,MACE,2FACFC,SAAU,cACVC,YAAa,iCACbC,MAAO,kCACPC,QAAQ,GAEVI,EAAE,CACAT,KAAM,WACNC,MACE,2FACFC,SAAU,aACVC,YAAa,iCACbC,MAAO,iCACPC,QAAQ,GAEVK,EAAE,CACAV,KAAM,OACNC,MACE,4FACFC,SAAU,oBACVC,YAAa,iCACbC,MAAO,6BACPC,QAAQ,IAKNM,EAAU,SAASC,GACvB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YAAYC,IAAKF,EAAMG,QAAQd,QAC9C,6BACE,2BAAIW,EAAMG,QAAQf,MAClB,2BAAIY,EAAMG,QAAQb,YAGtB,6BACE,2BAAG,0BAAMW,UAAU,QAAhB,gBAAH,IAA+CD,EAAMG,QAAQZ,aAC7D,2BAAG,0BAAMU,UAAU,QAAhB,UAAH,IAAyCD,EAAMG,QAAQX,QAEzD,6BACE,2BAAG,0BAAMS,UAAU,QAAhB,WAAH,IAA2CD,EAAMG,QAAQV,OAAS,UAAY,eAoDvEW,E,kDA5Cb,WAAYJ,GAAO,IAAD,sBAChB,cAAMA,GAEN,IAAMK,EAASC,IAAG,8BAHF,OAKhBD,EAAOE,GAAG,aAAa,SAACC,GACtB,IAAIC,EAAUD,EAAKE,MAAM,KACzB,EAAKC,UAAS,SAACC,EAAOZ,GACpB,IAAIa,EAAgB,EAAKD,MAAME,KAI/B,OAHAC,OAAOC,OAAOH,GAAeI,SAAQ,SAAAd,GACnCA,EAAQV,QAAS,KAEF,IAAdgB,EAAQ,IAGXA,EAAQQ,SAAS,SAAAC,GAEfL,EAAcK,GAAGzB,QAAS,KAJnB,CAACqB,KAAMD,SAWpBR,EAAOc,KAAK,WAAY,UAExB,EAAKP,MAAQ,CACXE,KAAM5B,GA3BQ,E,qDAiChB,OACE,yBAAKe,UAAU,OACb,4CACCc,OAAOC,OAAOI,KAAKR,MAAME,MAAMO,KAAI,SAAAC,GAAG,OACrC,kBAAC,EAAD,CAASnB,QAASmB,Y,GAvCVC,aCzEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84ec03e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport io from 'socket.io-client';\n\n\nconst bots_starting_state = {\n  5: {\n    name: \"Dr. Poki\",\n    image:\n      \"https://cdn.glitch.com/e1791e0a-5e5c-40c7-8e66-55f94f857c81%2Fdrpoki2.jpg?v=1584851455708\",\n    username: \"@DrPokiABot\",\n    description: \"This bot can hold discussions.\",\n    about: \"Dr. Poki can hold discussions.\",\n    status: false\n  },\n  3: {\n    name: \"Mr. Poki\",\n    image:\n      \"https://cdn.glitch.com/e1791e0a-5e5c-40c7-8e66-55f94f857c81%2Fmrpokia.jpg?v=1584851654129\",\n    username: \"@MrPokiABot\",\n    description: \"This bot can hold discussions.\",\n    about: \"Mr. Poki can hold discussions.\",\n    status: false\n  },\n  4: {\n    name: \"Mr. Poki\",\n    image:\n      \"https://cdn.glitch.com/e1791e0a-5e5c-40c7-8e66-55f94f857c81%2Fmrpokib.jpg?v=1584851656498\",\n    username: \"@MrPokiBBot\",\n    description: \"This bot can hold discussions.\",\n    about: \"Mr. Poki can hold discussions.\",\n    status: false\n  },\n  1:{\n    name: \"Mrs. Poki\",\n    image:\n      \"https://cdn.glitch.com/e1791e0a-5e5c-40c7-8e66-55f94f857c81%2Fdrpoki.jpg?v=1584851453916\",\n    username: \"@MrsPokiBot\",\n    description: \"This bot can hold discussions.\",\n    about: \"Mrs. Poki can hold discussions.\",\n    status: false\n  },\n  2:{\n    name: \"Ms. Poki\",\n    image:\n      \"https://cdn.glitch.com/e1791e0a-5e5c-40c7-8e66-55f94f857c81%2Fmspoki.jpg?v=1584851658949\",\n    username: \"@MsPokiBot\",\n    description: \"This bot can hold discussions.\",\n    about: \"Ms. Poki can hold discussions.\",\n    status: false\n  },\n  0:{\n    name: \"Poki\",\n    image:\n      \"https://cdn.glitch.com/e1791e0a-5e5c-40c7-8e66-55f94f857c81%2Fpokibot.jpg?v=1584851460016\",\n    username: \"@SuperBuggyBugBot\",\n    description: \"This bot can hold discussions.\",\n    about: \"Poki can hold discussions.\",\n    status: false\n  }\n};\n\n\nconst BotCard = function(props) {\n  return (\n    <div className=\"bot\">\n      <div className=\"bot-username\">\n        <img className=\"bot-image\" src={props.element.image} />\n        <div>\n          <p>{props.element.name}</p>\n          <p>{props.element.username}</p>\n        </div>\n      </div>\n      <div>\n        <p><span className=\"type\">Description:</span> {props.element.description}</p>\n        <p><span className=\"type\">About:</span> {props.element.about}</p>\n      </div>\n      <div>\n        <p><span className=\"type\">Status:</span> {(props.element.status ? \"Running\" : \"Inactive\")}</p>\n      </div>\n    </div>\n  );\n};\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n\n    const socket = io('http://159.89.225.148:1234');\n\n    socket.on(\"send_list\", (data)=>{\n      var numbers = data.split(\" \")\n      this.setState((state, props) => {\n        var new_bot_state = this.state.bots;\n        Object.values(new_bot_state).forEach(element => {\n          element.status = false;\n        })\n        if(numbers[0] == \"\"){\n          return {bots: new_bot_state};\n        }\n        numbers.forEach( n => {\n          // console.log(\"n\", n)\n          new_bot_state[n].status = true;\n        })\n        return {bots: new_bot_state};\n      });\n      //console.log(\"set state to...\", this.state)\n      \n    })\n    socket.emit(\"get_list\", \"hello?\")\n\n    this.state = {\n      bots: bots_starting_state\n    }\n  }\n\n  render() {\n    //console.log(\"rerendering item with state\", this.state)\n    return (\n      <div className=\"App\">\n        <h2>Current Bots</h2>\n        {Object.values(this.state.bots).map(ele => (\n          <BotCard element={ele}/>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}